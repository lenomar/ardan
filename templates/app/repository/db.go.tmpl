// Copyright {{year}} teamlint.com. All rights reserved.
// Code generated by ardan.

package {{.Setting.Repository}}

import (
	"log"
	"time"
    {{$drv:=.Setting.DBDriver}}
	{{if eq $drv "postgres"}}
	_ "github.com/lib/pq"
	{{else if eq $drv "mysql"}}
	_ "github.com/lib/pq"
	{{else}}
	_ "github.com/mattn/go-sqlite3"
	{{end}}
	"github.com/teamlint/ardan/config"
	"xorm.io/xorm"
	"xorm.io/xorm/names"
)

// SessionOptions session options
type SessionOptions interface {
	Options(sess *xorm.Session) *xorm.Session
}

{{$db:=.Setting.DBName}}
// NewDB create database engine
func NewDB() (*xorm.Engine, error) {
	db, err := xorm.NewEngine(config.Databases("{{$db}}").DriverName, config.Databases("{{$db}}").ConnString)
	if err != nil {
		return nil, err
	}
	db.SetMapper(names.GonicMapper{})
	// ping
	err = db.Ping()
	if err != nil {
		log.Fatalf("[repository.NewDB] err=%v\n", err)
	}
	// conn
	db.SetMaxOpenConns(config.Databases("{{$db}}").MaxOpenConns)
	db.SetMaxIdleConns(config.Databases("{{$db}}").MaxIdleConns)
	dur, err := time.ParseDuration(config.Databases("{{$db}}").ConnMaxLifetime)
	if err != nil {
		log.Fatalf("[repository.NewDB] SetConnMaxLifetime err=%v\n", err)
	}
	db.SetConnMaxLifetime(dur)
	// log
	if config.App().Debug {
		db.ShowSQL(true)
	}

	return db, err
}
