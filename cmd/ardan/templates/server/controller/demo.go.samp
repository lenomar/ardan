package {{.Setting.Controller}}

import (
	"net/http"

	"{{.Setting.GoMod}}/{{.Setting.Output}}/{{.Setting.App}}/{{.Setting.Model}}"
	"{{.Setting.GoMod}}/{{.Setting.Output}}/{{.Setting.App}}/{{.Setting.Model}}/query"
	"{{.Setting.GoMod}}/{{.Setting.Output}}/{{.Setting.App}}/{{.Setting.Service}}"

	"github.com/rs/zerolog/log"

	"github.com/gin-gonic/gin"
	"github.com/teamlint/ardan/server"
	api "github.com/teamlint/ardan/pkg/http"
)

type DemoController struct{
	DemoService     service.DemoService

}

func NewDemoController(svc {{.Setting.Service}}.DemoService) *DemoController {
	return &DemoController{
		DemoService: svc,
	}
}

// server module register interface
func (c *DemoController) RegisterModule(s *server.Server) {
	g := s.Group("/demo")
	g.POST("/add", c.Add)
	g.POST("/save", c.Save)
	g.POST("/list", c.List)
	g.GET("/info/:id", c.Info)
}

func (c *DemoController) Add(ctx *gin.Context) {
	params := struct {
		ID 				string 				 `json:"id" form:"id"`
		Username        string               `json:"username" form:"username"`
		IsApproved      bool       	         `json:"is_approved" form:"is_approved"`
		Email      		string               `json:"email" form:"email"`
		Gender       	{{.Setting.Model}}.Gender               `json:"gender" form:"gender"`
		Bio 			string               `json:"bio" form:"bio"`
		Phone 			string               `json:"phone" form:"phone"`
		Posts      		int64                `json:"posts" form:"posts"`
	}{}
	if err := ctx.ShouldBind(&params); err != nil {
		log.Err(err).Msg("[demo.Create] BindJSON")
		ctx.JSON(http.StatusOK, api.NewResponseError("参数解析失败"))
		return
	}
	item:={{.Setting.Model}}.Demo{
		ID: 		params.ID,
		Username: 	params.Username,
		IsApproved: params.IsApproved,
		Email: 		params.Email,
		Gender: 	params.Gender,
		Bio: 		params.Bio,
		Phone: 		params.Phone,
		Posts: 		params.Posts,
	}
	if item.ID == "" {
		item.ID = model.NewID()
	}
	if err := c.DemoService.Add(&item); err != nil {
		log.Err(err).Msg("[demo.Add] service load")
		ctx.JSON(http.StatusOK, api.NewResponseError("添加信息失败"))
		return
	}
	ctx.JSON(http.StatusOK, api.NewResponseOK("ok", item.ID))
}


func (c *DemoController) Save(ctx *gin.Context) {
	params := struct {
		ID 				string 				 `json:"id" form:"id"`
		Username        string               `json:"username" form:"username"`
		IsApproved      bool       	         `json:"is_approved" form:"is_approved"`
		Email      		string               `json:"email" form:"email"`
		Gender       	{{.Setting.Model}}.Gender               `json:"gender" form:"gender"`
		Bio 			string               `json:"bio" form:"bio"`
		Phone 			string               `json:"phone" form:"phone"`
		Posts      		int64                `json:"posts" form:"posts"`
	}{}
	if err := ctx.ShouldBind(&params); err != nil {
		log.Err(err).Msg("[demo.Save] BindJSON")
		ctx.JSON(http.StatusOK, api.NewResponseError("参数解析失败"))
		return
	}
	item:={{.Setting.Model}}.Demo{
		ID: 		params.ID,
		Username: 	params.Username,
		IsApproved: params.IsApproved,
		Email: 		params.Email,
		Gender: 	params.Gender,
		Bio: 		params.Bio,
		Phone: 		params.Phone,
		Posts: 		params.Posts,
	}
	if err := c.DemoService.Save(&item); err != nil {
		log.Err(err).Msg("[demo.Save] service load")
		ctx.JSON(http.StatusOK, api.NewResponseError("保存信息失败"))
		return
	}
	ctx.JSON(http.StatusOK, api.NewResponseOK("ok", item.ID))
}

func (c *DemoController) List(ctx *gin.Context) {
	var err error
	params := struct {
		query.Base
		query.Demo
	}{}
	if err = ctx.ShouldBindJSON(&params); err != nil {
		log.Err(err).Msg("BindJSON")
		ctx.JSON(http.StatusBadRequest, api.NewResponseError("参数解析失败"))
		return
	}
	var totals int64
	var items []*{{.Setting.Model}}.Demo
	items, totals, err = c.DemoService.Paged(&params.Base, &params.Demo)
	if err != nil {
		log.Err(err).Msg("c.DemoService.Paged")
		ctx.JSON(http.StatusOK, api.NewResponseError("获取资源列表信息失败"))
		return
	}
	result := {{.Setting.Model}}.PagedResult{
		Totals: totals,
		Items:  items,
	}
	ctx.JSON(http.StatusOK, api.NewResponseOK("ok", result))
}
func (c *DemoController) Info(ctx *gin.Context) {
	var result *{{.Setting.Model}}.Demo
	var err error
	id := ctx.Param("id")
	result, err = c.DemoService.Get(id)
	if err != nil {
		log.Err(err).Msg("[demo.Save] srvice load")
		ctx.JSON(http.StatusOK, api.NewResponseError("获取资源信息失败"))
		return
	}
	ctx.JSON(http.StatusOK, api.NewResponseOK("ok", result))
}
